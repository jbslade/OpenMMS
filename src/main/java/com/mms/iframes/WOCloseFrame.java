/*
 * Copyright 2021 J.B. Slade.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mms.iframes;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePickerSettings;
import com.mms.Database;
import com.mms.MMS;
import com.mms.utilities.DateTools;
import com.mms.utilities.OtherTools;
import com.mms.utilities.TableTools;
import java.sql.Time;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author J.B. Slade
 */
public class WOCloseFrame extends javax.swing.JInternalFrame {

    private final Object id;
    private final JTable parts, wo;
    private final int woRow;
    private final JButton woButton;
    DateTimePicker startTimePicker, endTimePicker;
    
    public WOCloseFrame(int row, JTable parts, JTable wo, JButton woButton) {
        initComponents();
        this.id = wo.getValueAt(row, 0);
        this.parts = parts;
        this.wo = wo;
        this.woRow = row;
        this.woButton = woButton;
        getRootPane().setDefaultButton(continueButton);
        
        //Set right click listeners
        actionArea.addMouseListener(MMS.getMouseListener());
        
        //Set parts
        DefaultTableModel t = (DefaultTableModel)partsTable.getModel();
        for(int i = 0; i < parts.getRowCount(); i++){
            Object [] o = new Object[4];
            o[0] = parts.getValueAt(i, 0);
            o[1] = parts.getValueAt(i, 1);
            o[2] = parts.getValueAt(i, 2);
            o[3] = 0;
            t.addRow(o);
        }
        TableTools.format(partsTable);
        TableTools.resize(partsTable, 10);
        
        //Set date pickers
        String [] d = wo.getValueAt(row, 1).toString().split("-");
        LocalDate woDate =  LocalDate.of(Integer.parseInt(d[0]), Integer.parseInt(d[1]), Integer.parseInt(d[2]));
        //Time settings
        TimePickerSettings timeSettings = new TimePickerSettings();
        timeSettings.setFormatForDisplayTime("HH:mm");
        timeSettings.setFormatForMenuTimes("HH:mm");
        timeSettings.setDisplayToggleTimeMenuButton(true);
        timeSettings.setAllowEmptyTimes(false);
        //Date settings
        DatePickerSettings startDateSettings = new DatePickerSettings();
        startDateSettings.setFormatForDatesCommonEra(DateTimeFormatter.ISO_LOCAL_DATE);
        startDateSettings.setBorderCalendarPopup(actionScroll.getBorder());
        startDateSettings.setAllowEmptyDates(false);
        DatePickerSettings endDateSettings = new DatePickerSettings();
        endDateSettings.setFormatForDatesCommonEra(DateTimeFormatter.ISO_LOCAL_DATE);
        endDateSettings.setBorderCalendarPopup(actionScroll.getBorder());
        endDateSettings.setAllowEmptyDates(false);
        //Start time picker
        startTimePicker = new DateTimePicker(startDateSettings, timeSettings);
        startTimePicker.datePicker.getComponentDateTextField().setBorder(actionScroll.getBorder());
        startTimePicker.timePicker.getComponentTimeTextField().setBorder(actionScroll.getBorder());
        startTimePicker.datePicker.setPreferredSize(startTimePicker.getTimePicker().getPreferredSize());
        startTimePicker.datePicker.setDate(woDate);
        startTimePanel.add(startTimePicker);
        startTimePanel.repaint();
        //End time picker
        endTimePicker = new DateTimePicker(endDateSettings, timeSettings);
        endTimePicker.datePicker.getComponentDateTextField().setBorder(actionScroll.getBorder());
        endTimePicker.timePicker.getComponentTimeTextField().setBorder(actionScroll.getBorder());
        endTimePicker.datePicker.setPreferredSize(endTimePicker.getTimePicker().getPreferredSize());
        endTimePicker.datePicker.setDate(woDate);
        endTimePicker.timePicker.setTimeToNow();
        endTimePanel.add(endTimePicker);
        endTimePanel.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new javax.swing.JPanel();
        actionLabel = new javax.swing.JLabel();
        actionScroll = new javax.swing.JScrollPane();
        actionArea = new javax.swing.JTextArea();
        partsLabel = new javax.swing.JLabel();
        partsScroll = new javax.swing.JScrollPane();
        partsTable = new javax.swing.JTable();
        startTimeLabel = new javax.swing.JLabel();
        continueButton = new javax.swing.JButton();
        startTimePanel = new javax.swing.JPanel();
        endTimePanel = new javax.swing.JPanel();
        endTimeLabel = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Close Work Order #");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/dialogs/workOrders.png"))); // NOI18N

        actionLabel.setText("Actions Performed:");

        actionArea.setColumns(20);
        actionArea.setRows(3);
        actionScroll.setViewportView(actionArea);

        partsLabel.setText("Parts Used:");

        partsTable.setAutoCreateRowSorter(true);
        partsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " #", " Name", " In Stock", " Used Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        partsScroll.setViewportView(partsTable);

        startTimeLabel.setText("Start Time:");

        continueButton.setText("Done");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        startTimePanel.setDoubleBuffered(false);
        startTimePanel.setPreferredSize(new java.awt.Dimension(0, 23));
        startTimePanel.setLayout(new java.awt.GridLayout(1, 0));

        endTimePanel.setPreferredSize(new java.awt.Dimension(0, 23));
        endTimePanel.setLayout(new java.awt.GridLayout(1, 0));

        endTimeLabel.setText("End Time:");

        javax.swing.GroupLayout backPanelLayout = new javax.swing.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actionScroll)
                    .addComponent(actionLabel)
                    .addComponent(partsLabel)
                    .addComponent(partsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(continueButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(backPanelLayout.createSequentialGroup()
                        .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(endTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(actionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(endTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(continueButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        String action = actionArea.getText();
        if(action.isEmpty()) actionArea.requestFocus();
        else{
            OtherTools.disablePanel(backPanel);
            new Thread(){
                @Override
                public void run(){
                    //Update work order
                    Database.executeQuery("UPDATE work_orders SET wo_action = ?, wo_start_time = ?, wo_end_time = ?, wo_start_date = ?, wo_end_date = ?, wo_status = ? WHERE id = ?",
                            new Object[]{action, Time.valueOf(startTimePicker.getTimePicker().getTime()), Time.valueOf(endTimePicker.getTimePicker().getTime()),
                                DateTools.convertToSQLDate(startTimePicker.getDatePicker().getDate()), DateTools.convertToSQLDate(endTimePicker.getDatePicker().getDate()), "Closed", id});
                    for(int i = 0; i < partsTable.getRowCount(); i++){
                        int qty = Integer.parseInt(partsTable.getValueAt(i, 3).toString());
                        if(qty > 0){
                            Object partID = partsTable.getValueAt(i, 0);
                            //Insert into wo_parts table
                            Database.executeQuery("INSERT INTO wo_parts (wo_id, part_id, qty) VALUES (?, ?, ?)",
                                    new Object[]{id, partID, qty});
                            //Update parts table
                            int newQty = Integer.parseInt(parts.getValueAt(i, 2).toString()) - qty;
                            Database.executeQuery("UPDATE parts SET part_qty = ? WHERE id = ?",
                                    new Object[]{newQty, partID});
                            parts.setValueAt(newQty, i, 2);
                        }
                    }
                    wo.setValueAt("Closed", woRow, 7);
                    woButton.setEnabled(false);
                    if(MMS.DEBUG){
                        try {
                            Thread.sleep(4000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(WOCloseFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    dispose();
                }
            }.start();
        }
    }//GEN-LAST:event_continueButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea actionArea;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JScrollPane actionScroll;
    private javax.swing.JPanel backPanel;
    private javax.swing.JButton continueButton;
    private javax.swing.JLabel endTimeLabel;
    private javax.swing.JPanel endTimePanel;
    private javax.swing.JLabel partsLabel;
    private javax.swing.JScrollPane partsScroll;
    private javax.swing.JTable partsTable;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JPanel startTimePanel;
    // End of variables declaration//GEN-END:variables
}
