/*
 * Copyright 2021 J.B. Slade.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mms.modules.iframes;

import com.mms.Database;
import com.mms.MMS;
import com.mms.utilities.OtherTools;
import com.mms.utilities.TableTools;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author J.B. Slade
 */
public class AssetFrame extends javax.swing.JInternalFrame {
    
    private final int row;
    private final JTable table;
    
    public AssetFrame(JTable t, int r) {
        initComponents();
        table = t;
        row = r;
        getRootPane().setDefaultButton(continueButton);
        
        //Set right click listeners
        nameField.addMouseListener(MMS.getMouseListener());
        descField.addMouseListener(MMS.getMouseListener());

        //Set locations
        ResultSet rs = Database.select("SELECT id, location_name FROM locations WHERE archived = 'N'");
        try {
            while(rs.next()){
                locationCombo.addItem(rs.getString(1)+" - "+rs.getString(2));
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(EmployeeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Set departments
        rs = Database.select("SELECT custom_value FROM custom_fields WHERE custom_type = 'asset_type'");
        try {
            while(rs.next()){
                typeCombo.addItem(rs.getString(1));
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(AssetFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Edit
        if(row != -1){
            continueButton.setText("Save");
            typeCombo.setSelectedItem(table.getValueAt(row, 3));
            locationCombo.setSelectedItem(table.getValueAt(row, 4));
            nameField.setText(t.getModel().getValueAt(r, 1).toString());
            descField.setText(t.getModel().getValueAt(r, 2).toString());
            nameField.requestFocus();
            nameField.selectAll();
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        descLabel = new javax.swing.JLabel();
        descScroll = new javax.swing.JScrollPane();
        descField = new javax.swing.JTextArea();
        continueButton = new javax.swing.JButton();
        locationLabel = new javax.swing.JLabel();
        locationCombo = new javax.swing.JComboBox<>();
        typeLabel = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setTitle("New Asset");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/dialogs/assets.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeiconified(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        nameLabel.setText("Name:");

        descLabel.setText("Description:");

        descField.setColumns(17);
        descField.setLineWrap(true);
        descField.setRows(4);
        descScroll.setViewportView(descField);

        continueButton.setText("Add");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        locationLabel.setText("Location:");

        locationCombo.setPreferredSize(nameField.getPreferredSize());

        typeLabel.setText("Type:");

        typeCombo.setPreferredSize(nameField.getPreferredSize());

        javax.swing.GroupLayout backPanelLayout = new javax.swing.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField)
                    .addComponent(descScroll)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(continueButton))
                    .addComponent(typeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(backPanelLayout.createSequentialGroup()
                        .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(descLabel)
                            .addComponent(typeLabel)
                            .addComponent(locationLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(continueButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        String name = nameField.getText(), desc = descField.getText(),
                locName = locationCombo.getSelectedItem().toString(),
                type = typeCombo.getSelectedItem().toString();
        int locNum = Integer.parseInt(locName.substring(0, locName.indexOf("-")-1));
        if(name.isEmpty()) nameField.requestFocus();
        else{
            OtherTools.disablePanel(backPanel);
            new Thread(){
                @Override
                public void run(){
                    if(row == -1){ //New asset
                        //Get next no
                        int assNum = 0;
                        ResultSet rs = Database.select("SELECT MAX(id) FROM assets");
                        try {
                            if(rs.next()) assNum = rs.getInt(1) == -1 ? 0 : rs.getInt(1);
                            rs.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(AssetFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        assNum++;
                        //Insert into DB
                        Database.executeQuery("INSERT INTO assets (id, asset_name, asset_desc, asset_type, location_id, archived) VALUES (?, ?, ?, ?, ?, 'N')",
                                new Object[]{assNum, name, desc, type, locNum});
                        //Insert into table
                        Object [] o = {assNum, name, desc, type, locName};
                        DefaultTableModel m = (DefaultTableModel)table.getModel();
                        m.insertRow(0, o);
                        //Select new row
                        table.setRowSelectionInterval(0, 0);
                    }
                    else{ //Edit asset
                        //Get selected number
                        int assNum = Integer.parseInt(table.getValueAt(row, 0).toString());
                        //Update database
                        Database.executeQuery("UPDATE assets SET asset_name = ?, asset_desc = ?, asset_type = ?, location_id = ? WHERE id = ?",
                                new Object[]{name, desc, type, locNum, assNum});
                        //Update table
                        table.setValueAt(name, row, 1);
                        table.setValueAt(desc, row, 2);
                        table.setValueAt(type, row, 3);
                        table.setValueAt(locName, row, 4);
                        //Select updated row
                        table.setRowSelectionInterval(row, row);
                    }
                    TableTools.resize(table);
                    dispose();
                }
            }.start();
        }
    }//GEN-LAST:event_continueButtonActionPerformed

    private void formInternalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeiconified
        getRootPane().setDefaultButton(continueButton);
    }//GEN-LAST:event_formInternalFrameDeiconified

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backPanel;
    private javax.swing.JButton continueButton;
    private javax.swing.JTextArea descField;
    private javax.swing.JLabel descLabel;
    private javax.swing.JScrollPane descScroll;
    private javax.swing.JComboBox<String> locationCombo;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JComboBox<String> typeCombo;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
}
